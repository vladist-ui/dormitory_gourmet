from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from config.settings import Config
from services.api_client import GoogleSheetsClient
from keyboards.inline import (
    get_reserve_keyboard,
    get_language_keyboard,
    get_order_confirmation_keyboard,
)
from states import OrderStates, LanguageStates
from filters.admin_filter import AdminFilter

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message, sheets: GoogleSheetsClient):
    print(f"Processing /start command for user {message.from_user.id}")
    user_id = message.from_user.id


    users = sheets.get_all_users()
    user_exists = any(str(user["user_id"]) == str(user_id) for user in users)

    if not user_exists:
        print(f"Adding new user {user_id}")
        sheets.add_user(user_id)

    #–Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_language = next(
        (user["language"] for user in users if str(user["user_id"]) == str(user_id)),
        "ru",
    )
    print(f"User language: {user_language}")

    # –ü—Ä–∏–≤–µ—Ç—Å–≤–∏–µ
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–æ–Ω—Å–∞–º–∏ –±–ª—é–¥.\n"
        f"–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: {user_language}\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /language –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞.",
        reply_markup=get_language_keyboard(),
    )


@router.message(Command("language"))
async def cmd_language(message: Message, state: FSMContext):
    await state.set_state(LanguageStates.waiting_for_language)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", reply_markup=get_language_keyboard()
    )


@router.callback_query(F.data.startswith("lang_"))
async def process_language_selection(
    callback: CallbackQuery, state: FSMContext, sheets: GoogleSheetsClient
):
    lang = callback.data.split("_")[1]
    user_id = callback.from_user.id
    sheets.update_user_language(user_id, lang)
    await state.clear()
    await callback.message.edit_text(
        "–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!" if lang == "ru" else "Language successfully changed!"
    )


@router.message(Command("send_menu"))
async def cmd_send_menu(message: Message, sheets: GoogleSheetsClient, config: Config):
    print(f"Processing /send_menu command from user {message.from_user.id}")
    admin_filter = AdminFilter(config.tg_bot.admin_ids)
    if not await admin_filter(message):
        print(f"User {message.from_user.id} is not admin")
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    print("User is admin, getting unsent announcements")
    unsent = sheets.get_unsent_announcements()
    print(f"Found {len(unsent)} unsent announcements")

    if not unsent:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∞–Ω–æ–Ω—Å–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return

    users = sheets.get_all_users()
    print(f"Found {len(users)} users to send announcements to")

    if not users:
        await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    # —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    try:
        await message.answer(
            f"üçΩ *{unsent[0]['–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞']}*\n\n"
            f"{unsent[0]['–û–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞']}\n\n"
            f"{unsent[0]['–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è']}\n\n"
            f"üí∞ –¶–µ–Ω–∞: {unsent[0]['–¶–µ–Ω–∞']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {unsent[0]['–í—Ä–µ–º—è']}",
            reply_markup=get_reserve_keyboard(announcement_id=unsent[0]["row_index"]),
        )
        print(f"Successfully sent to admin {message.from_user.id}")
    except Exception as e:
        print(f"Error sending message to admin: {e}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for announcement in unsent:
        print(f"Processing announcement: {announcement['–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞']}")
        for user in users:
            try:
                user_id = user["user_id"]
                if int(user_id) == message.from_user.id:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏

                print(f"Sending to user {user_id}")
                await message.bot.send_message(
                    chat_id=int(user_id),
                    text=f"üçΩ *{announcement['–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞']}*\n\n"
                    f"{announcement['–û–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞']}\n\n"
                    f"üí∞ –¶–µ–Ω–∞: {announcement['–¶–µ–Ω–∞']}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {announcement['–í—Ä–µ–º—è']}",
                    reply_markup=get_reserve_keyboard(
                        announcement_id=announcement["row_index"]
                    ),
                )
                print(f"Successfully sent to user {user_id}")
            except Exception as e:
                print(f"Error sending message to user {user_id}: {e}")

        print(f"Marking announcement as sent (row {announcement['row_index']})")
        sheets.mark_announcement_sent(announcement["row_index"])

    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


@router.callback_query(F.data == "reserve")
async def process_reserve(callback: CallbackQuery, state: FSMContext):
    await state.set_state(OrderStates.waiting_for_room)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã:")


@router.message(OrderStates.waiting_for_room)
async def process_room(message: Message, state: FSMContext):
    await state.update_data(room=message.text)
    await state.set_state(OrderStates.waiting_for_portions)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π:")


@router.message(OrderStates.waiting_for_portions)
async def process_portions(message: Message, state: FSMContext):
    try:
        portions = int(message.text)
        if portions <= 0:
            raise ValueError
        await state.update_data(portions=portions)
        await state.set_state(OrderStates.waiting_for_payment)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ—Ä—Ü–∏–π.")


@router.message(OrderStates.waiting_for_payment, F.photo)
async def process_payment(
    message: Message, state: FSMContext, sheets: GoogleSheetsClient
):
    data = await state.get_data()
    photo = message.photo[-1]
    file_id = photo.file_id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    sheets.add_order(
        user_id=message.from_user.id,
        dish_name=data["dish_name"],
        room=data["room"],
        portions=data["portions"],
        payment_screenshot=file_id,
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
    for admin_id in Config.tg_bot.admin_ids:
        try:
            await message.bot.send_photo(
                chat_id=admin_id,
                photo=file_id,
                caption=f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n–ö–æ–º–Ω–∞—Ç–∞: {data['room']}\n–ü–æ—Ä—Ü–∏–π: {data['portions']}",
                reply_markup=get_order_confirmation_keyboard(str(message.message_id)),
            )
        except Exception as e:
            print(f"Error sending notification to admin {admin_id}: {e}")

    await state.clear()
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


@router.callback_query(F.data.startswith(("confirm_", "reject_")))
async def process_order_confirmation(
    callback: CallbackQuery, sheets: GoogleSheetsClient, config: Config
):
    action, order_id = callback.data.split("_")
    orders_ws = sheets.get_worksheet("Orders")
    order_cell = orders_ws.find(order_id)
    if not order_cell:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    order_data = {
        "user_id": orders_ws.cell(order_cell.row, 1).value,
        "username": orders_ws.cell(order_cell.row, 2).value,
        "room": orders_ws.cell(order_cell.row, 3).value,
        "portions": orders_ws.cell(order_cell.row, 4).value,
        "dish_name": orders_ws.cell(order_cell.row, 6).value,
    }

    if action == "confirm":
        sheets.update_order_status(order_id, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
        await callback.message.bot.send_message(
            chat_id=order_data["user_id"],
            text=f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n"
            f"üçΩ –ë–ª—é–¥–æ: {order_data['dish_name']}\n"
            f"üè¢ –ë–ª–æ–∫: {order_data['room']}\n"
            f"üçΩ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π: {order_data['portions']}\n\n"
            f"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üçΩ",
        )
    else:
        sheets.update_order_status(order_id, "–û—Ç–º–µ–Ω–µ–Ω")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in config.tg_bot.admin_ids:
            try:
                await callback.message.bot.send_message(
                    chat_id=admin_id,
                    text=f"‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω!\n\n"
                    f"üçΩ –ë–ª—é–¥–æ: {order_data['dish_name']}\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order_data['user_id']} (@{order_data['username']})\n"
                    f"üè¢ –ë–ª–æ–∫: {order_data['room']}\n"
                    f"üçΩ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π: {order_data['portions']}",
                )
            except Exception as e:
                print(f"Error sending notification to admin {admin_id}: {e}")

        await callback.message.bot.send_message(
            chat_id=order_data["user_id"],
            text=f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
            f"üçΩ –ë–ª—é–¥–æ: {order_data['dish_name']}\n"
            f"üè¢ –ë–ª–æ–∫: {order_data['room']}\n"
            f"üçΩ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π: {order_data['portions']}\n\n"
            f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
        )

    await callback.message.edit_reply_markup(reply_markup=None)


@router.message(Command("nofood"))
async def cmd_nofood(message: Message, sheets: GoogleSheetsClient, config: Config):
    print(f"Processing /nofood command from user {message.from_user.id}")
    admin_filter = AdminFilter(config.tg_bot.admin_ids)
    if not await admin_filter(message):
        print(f"User {message.from_user.id} is not admin")
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    users = sheets.get_all_users()
    print(f"Found {len(users)} users to send notification to")

    if not users:
        await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    success_count = 0
    for user in users:
        try:
            user_id = user["user_id"]
            await message.bot.send_message(
                chat_id=int(user_id),
                text="‚ö†Ô∏è *–í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ*\n\n"
                "–°–µ–≥–æ–¥–Ω—è –µ–¥—ã –Ω–µ –±—É–¥–µ—Ç.\n"
                "–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.",
            )
            success_count += 1
        except Exception as e:
            print(f"Error sending notification to user {user_id}: {e}")

    await message.answer(
        f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ {len(users)}"
    )


@router.message(Command("cancel"))
async def cmd_cancel(message: Message, sheets: GoogleSheetsClient, config: Config):
    print(f"Processing /cancel command from user {message.from_user.id}")
    
    # –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    last_order = sheets.get_last_user_order(message.from_user.id)
    if not last_order:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—è–º
    orders_ws = sheets.get_worksheet("Orders")
    headers = orders_ws.row_values(1)
    status_column = headers[7]  # 8-–π —Å—Ç–æ–ª–±–µ—Ü (–∏–Ω–¥–µ–∫—Å 7) - —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    order_id_column = headers[6]  # 7-–π —Å—Ç–æ–ª–±–µ—Ü (–∏–Ω–¥–µ–∫—Å 6) - ID –∑–∞–∫–∞–∑–∞
    dish_name_column = headers[5]  # 6-–π —Å—Ç–æ–ª–±–µ—Ü (–∏–Ω–¥–µ–∫—Å 5) - –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
    room_column = headers[2]  # 3-–π —Å—Ç–æ–ª–±–µ—Ü (–∏–Ω–¥–µ–∫—Å 2) - –±–ª–æ–∫
    portions_column = headers[3]  # 4-–π —Å—Ç–æ–ª–±–µ—Ü (–∏–Ω–¥–µ–∫—Å 3) - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π
    username_column = headers[1]  # 2-–π —Å—Ç–æ–ª–±–µ—Ü (–∏–Ω–¥–µ–∫—Å 1) - username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –µ—â–µ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω
    if last_order[status_column] != "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è":
        await message.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–º–µ–Ω—ã —Å –¥–∞—Ç–æ–π
    from datetime import datetime
    cancel_status = f"–û—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    sheets.update_order_status(last_order[order_id_column], cancel_status)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    for admin_id in config.tg_bot.admin_ids:
        try:
            await message.bot.send_message(
                chat_id=admin_id,
                text=f"‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!\n\n"
                     f"üçΩ –ë–ª—é–¥–æ: {last_order[dish_name_column]}\n"
                     f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {last_order['user_id']} (@{last_order[username_column]})\n"
                     f"üè¢ –ë–ª–æ–∫: {last_order[room_column]}\n"
                     f"üçΩ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π: {last_order[portions_column]}\n"
                     f"‚è∞ –í—Ä–µ–º—è –æ—Ç–º–µ–Ω—ã: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
        except Exception as e:
            print(f"Error sending notification to admin {admin_id}: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        f"‚úÖ –í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω:\n\n"
        f"üçΩ –ë–ª—é–¥–æ: {last_order[dish_name_column]}\n"
        f"üè¢ –ë–ª–æ–∫: {last_order[room_column]}\n"
        f"üçΩ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π: {last_order[portions_column]}\n\n"
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± –æ—Ç–º–µ–Ω–µ."
    )


@router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "ü§ñ *Dormitory Gourmet Bot*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –µ–¥—ã –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏.\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ /language - –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –±–æ—Ç–∞\n"
        "‚Ä¢ /cancel - –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑\n"
        "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n"
        "1. –î–æ–∂–¥–∏—Ç–µ—Å—å –∞–Ω–æ–Ω—Å–∞ –±–ª—é–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å'\n"
        "3. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π\n"
        "4. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±–ª–æ–∫\n"
        "5. –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞\n"
        "6. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    
    await message.answer(help_text, parse_mode="Markdown")
